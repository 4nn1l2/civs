#!@PERL@

use strict;
use warnings;

use lib '@CGIBINDIR@';
use civs_common;
use CGI qw(:standard);
use Digest::MD5 qw(md5_hex);
use DB_File;
use mail;
use Socket;
use IO::Handle;

my $thisurl = $civs_bin_path."/create_election@PERLEXT@";

### Initial parameter checking

my $email_addr = param('email_addr');
if (!($email_addr =~ m/.\@./)) {
    print header(), start_html("Invalid email address");
    HTML_Header("CIVS Election Creation");
    CIVS_Header();
    print h1("Invalid email address");
    print p("The address \"$email_addr\" is not acceptable");
    print end_html();
    exit 0;
}

my $choices = param('choices');
my @c1 = split /(\r\n)+/, $choices;
my @c2 = ();
my $choices_file = upload('choices_file');
if (defined($choices_file)) {
    while (<$choices_file>) {
	chomp;
	push @c2, $_;
    }
}
my $num_choices = 0;
$choices = "";
sub trim {
    (my $s) = @_;
    $s =~ s/^\s+//;
    $s =~ s/\s+$//;
    return $s;
}
foreach my $ch (@c1) {
    $ch = &trim($ch);
    if (!($ch =~ m/^\s*$/)) {
	$choices .= $ch;
	$choices .= "\n";
	$num_choices++;
    }
}
foreach my $ch (@c2) {
    $ch = &trim($ch);
    if (!($ch =~ m/^\s*$/)) {
	$choices .= $ch;
	$choices .= "\n";
	$num_choices++;
    }
}

if ($num_choices < 2) {
    HTML_Header("CIVS Election Creation");
    CIVS_Header();
    print h1("Error");
    print p('An election must have at least two choices.');
    print end_html();
    exit 0;
}

### Election looks ok, create the election directory

my $election_id = 'E_'.SecureNonce();
my $election_dir = $home.'/elections/'.$election_id;
my $election_data = $election_dir.'/election_data';

if (!mkdir($election_dir)) {
    HTML_Header("CIVS Election Creation");
    CIVS_Header();
    print h1("Error");
    print p("The election directory is not writeable");
    print end_html();
    exit 0;
}

my %edata;
tie %edata, "DB_File", $election_data, O_CREAT|O_RDWR, 0777, $DB_HASH;

##### read form data into DB
$edata{'title'} = my $title = param('title');
$edata{'description'} = param('description');
$edata{'name'} = my $name = param('name');
$edata{'email_addr'} = param('email_addr');
$edata{'num_winners'} = param('num_winners');
$edata{'election_end'} = param('election_end');
my $public = param('public');
if (!defined($public) or $public eq '') {
    $public = "no";
}
$edata{'public'} = $public;
my $writeins = param('writeins');
if (!defined($writeins) or $writeins eq '') {
    $writeins = 'no';
} else {
    $writeins = 'yes';
}
my $shuffle = param('shuffle');
if (!defined($shuffle) or $shuffle eq '') {
    $shuffle = 'yes'; # shuffle by default
}
$edata{'writeins'} = $writeins;
$edata{'shuffle'} = param('shuffle');
my $proportional = param('proportional');
if (!defined($proportional) or $proportional eq '') {
    $proportional = 'no';
} else {
    $proportional = 'yes';
}
$edata{'proportional'} = $proportional;

$edata{'choices'} = $choices;

my $addresses = param('addresses');
my $addresses_file = upload('addresses_file');
if (defined($addresses_file)) {
    while (<$addresses_file>) {
    	$addresses .= $_;
    }
}
$edata{'addresses'} = $addresses;

my $rating_interpretation = param('rating_interpretation');
my $use_combined_ratings;
if (defined($rating_interpretation) and $rating_interpretation eq 'combined_ratings') {
    $use_combined_ratings = 1;
} else {
    $use_combined_ratings = 0;
}
$edata{'use_combined_ratings'} = $use_combined_ratings;

my $ballot_reporting = param('ballot_reporting');
if (!defined($ballot_reporting) or $ballot_reporting eq '') {
    $ballot_reporting = 'no';
} else {
    $ballot_reporting = 'yes';
}
$edata{'ballot_reporting'} = $ballot_reporting;
my $reveal_voters = param('reveal_voters');
if (!defined($reveal_voters) or $reveal_voters eq '') {
    $reveal_voters = 'no';
} else {
    $reveal_voters = 'yes';
}
$edata{'reveal_voters'} = $reveal_voters;

my $restrict_results = param('restrict_results');
my $result_addrs;
if (!defined($restrict_results) or $restrict_results eq '') {
    $restrict_results = 'no';
} else {
    $restrict_results = 'yes';
    $edata{'result_addrs'} = $result_addrs = param('result_addrs');
}
$edata{'restrict_results'} = $restrict_results;

HTML_Header("CIVS Election Creation");
CIVS_Header("Election created: $title");

# print pre("public = $public");
print "<pre>";

my $control_key = SecureNonce();
my $authorization_key = SecureNonce();
my $result_key = SecureNonce();
$edata{'hash_control_key'} = civs_hash($control_key);
$edata{'hash_authorization_key'} = civs_hash($authorization_key);
$edata{'hash_result_key'} = civs_hash($result_key);

my $url = "http://$thishost$civs_bin_path/control@PERLEXT@?id=$election_id&key=$control_key&akey=$authorization_key";

if (!($local_debug)) {

ConnectMail;
my $civs_supervisor = '@SUPERVISOR@';
Send "mail from: $civs_supervisor"; ConsumeSMTP;
Send "rcpt to: $email_addr"; ConsumeSMTP;
Send "data"; ConsumeSMTP;
Send "From: $civs_supervisor (Condorcet Internet Voting Service)";
Send "To: $email_addr ($name)";
Send "Subject: CIVS election created: $title";
Send "";
Send "This email acknowledges the creation of a new election,";
Send "$title. You have been designated as the supervisor of this";
Send "election. To start and stop the election, please use the following URL:";
Send "";
Send "$url";
Send "";
if ($public eq 'yes') {
    Send "Because this is a public poll, voters may be directed to the following URL:";
    Send "";
    Send "http://$thishost$civs_bin_path/vote@PERLEXT@?id=$election_id&akey=$authorization_key";
    Send "";
}
Send "For more information about the Condorcet Internet Voting Service, see";
Send "  $civs_home.\r\n";
Send "."; ConsumeSMTP;
CloseMail;

print "</pre>\n";

print p("Mail has been sent to the address you provided (<tt>$email_addr</tt>).");
print p("Click on the URL in that email to start the election: <strong>$title</strong>.");

} else { # debugging mode
    print p('Here is the URL to control the new election. In ordinary operation
             this would be sent to the supervisor via email.');
    print pre("<a href=\"$url\">$url</a>");
}


print end_html();
Log("Election $title ($election_id) created by $email_addr");
untie %edata;

# Send authorized result viewers an email containing the URL that
# allows viewing results.
sub SendResultKey {
    my $result_key = shift;

    my @result_addrs = split /(\r\n)+/, $result_addrs;
    foreach my $addr (@result_addrs) {
	chomp $addr;
	print pre(b("Sending result key to $addr"));

	my $url = "http://$thishost$civs_bin_path/results@PERLEXT@?id=$election_id&rkey=$result_key";
	ConnectMail;
	my $civs_supervisor = '@SUPERVISOR@';
	Send "mail from: $civs_supervisor"; ConsumeSMTP;
	Send "rcpt to: $addr"; ConsumeSMTP;
	Send "data"; ConsumeSMTP;
	Send "From: $civs_supervisor (Condorcet Internet Voting Service)";
	Send "To: $addr";
	Send "Subject: Results of CIVS election: $title";
	Send "";
	Send "A new CIVS election has been created named $title.";
	Send "You have been designated as a user who is permitted to see the";
	Send "result of this election. You will not be able to do this until";
	Send "the election has been closed. To see the results, visit the";
	Send "following URL:";
	Send "";
	Send "$url";
	Send "";
	Send "This URL is private. Allowing unauthorized users access to this";
	Send "URL will permit them to see the election results.";
	Send "For more information about the Condorcet Internet Voting Service, see";
	Send "  $civs_home.\r\n";
	Send "."; ConsumeSMTP;
	CloseMail;
    }
}

if ($restrict_results eq 'yes') {
    SendResultKey($result_key);
}


exit 0;

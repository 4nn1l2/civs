#!@PERL@

use strict;
use warnings;

use lib '@CGIBINDIR@';
# use admctrl;

use civs_common;
use CGI qw(:standard);

use Digest::MD5 qw(md5_hex);
use DB_File;

use Socket;
use IO::Handle;

my $thisurl = $civs_bin_path."/vote@PERLEXT@";

use election;

# There are many different ways to enter this script.
# 1. As the initial page one uses to cast a vote in a private election
#    (with id, voter, voter_key defined)
# 2. As the initial page one uses to cast a vote in a public election (id
#    defined, no voter/voter_key)
# 3. To actually cast a vote (old process_vote): Vote is defined, as are C1-Cn.
# 4. To sort the choices
# 5. To add a writein
# 6. To reload a set of rankings

my $voter = param('voter'); # nearly obsolete
my $old_voter_key = param('voter_key'); # nearly obsolete
my $voter_key = param('key');
my $authorization_key = param('akey');

my $js_ui = 1;
if (defined($proportional) && defined($use_combined_ratings) &&
    $proportional eq 'yes' && $use_combined_ratings) { $js_ui = 0; }

if ($js_ui) {
    HTML_Header('CIVS Voting', 'vote.js');
} else {
    HTML_Header('CIVS Voting');
}

my $winners_text;
if ($num_winners == 1) {
    $winners_text = "single favorite choice";
} else {
    $winners_text = "$num_winners favorite choices";
}

CIVS_Header($title);

CheckElectionID;
CheckStarted;
CheckNotStopped;
if ($public ne 'yes') {
    CheckVoterKey($voter_key, $old_voter_key, $voter);
} else {
    if (!&ElectionUsesAuthorizationKey) {
	# for backwards compatibility
	$voter_key = $remote_ip_address;
	$voter = "voter";           
    } else {
	CheckAuthorizationKeyForVoting($authorization_key);
	$voter_key = &civs_hash($remote_ip_address,$authorization_key);
    }
}

if (!$local_debug) {
    CheckNotVoted($voter_key, $old_voter_key, $voter);
}

my $sort_choices = param('SortChoices');
my $add_writein = param('AddWritein');
my $vote = param('Vote');
my $load = param('Load');

if ($vote && $voting_enabled) {
    &ProcessVote;     # prints out confirmation; call does not return
    exit 0;           # should not happen.
} 

my (@rank, @choice_index, @iota);
&OrderChoices;

if ($add_writein and $writeins eq 'yes') {
    &AddWritein;
}

if ($load) {
    &Load;
}

if ($voting_enabled) {
    &IntroduceVoting;
} else {
    &IntroduceWriteins;
}

if ($ballot_reporting eq 'yes') {
    my $msg = b('Ballot reporting is enabled for this poll. ')
	    . 'Your ballot (the rankings you assign to candidates) '
	    . 'will be made public when the poll is closed.';
    if ($reveal_voters eq 'yes') {
	$msg .= '<br><strong>Your email address will be visible</strong> along with your ballot.';
    } else {
	$msg .= ' However, your ballot will still be anonymous: '
	      . 'no personally identifying information will appear.';
    }
    if ($reveal_voters eq 'yes') {
	print '<div class=emphasized>'.$msg.'</div>';
    } else {
	print p($msg);
    }
}

my $rating = 'Rank';
if ($proportional eq 'yes' && $use_combined_ratings) {
    $rating = 'Weight';
}

print $cr, '<form method="POST"
        action="'.$thisurl.'"
        enctype="multipart/form-data"
        name="CastVote">';

print '<table class="form" border="0" cellpadding="5" cellspacing="0"><tr><td>', $cr;

print '<table border="1" cellpadding="5" cellspacing="0" id="preftable"><tr>
	<th>&nbsp;Choice&nbsp;</th>';
if ($voting_enabled) {
    print '<th>'.$rating.'</th>';
}
print '</tr>',$cr;

print hidden('voter', $voter); # nearly obsolete
print hidden('voter_key', $old_voter_key); # nearly obsolete
print hidden('key', $voter_key);
print hidden('id', $election_id);
print hidden('akey', $authorization_key);

print $cr, '<!-- Current rankings:', $cr;
for (my $i = 0; $i < $num_choices; $i++) {
    $name = $choices[$i];
    $name =~ s/"/ /;
    my $selected = $rank[$i];
    print "$i \"$choices[$i]\" $selected", $cr;
}
print "-->", $cr;

for (my $i = 0; $i < $num_choices; $i++) {
    my $k = $choice_index[$i];
    my $selected = $rank[$k];
    my $choice = $choices[$k];
    if ($js_ui) {
	print "<tr onClick=\"select_row(this, event.shiftKey||event.ctrlKey);\"><td><b>$choice</b></td>", $cr;
    } else {
	print "<tr><td><b>$choice</b></td>", $cr;
    }
    if ($voting_enabled) {
	if ($proportional ne 'yes' || !$use_combined_ratings) {
	    print "<td><select size=1 name=\"C$k\" onChange=\"sort_rows()\">", $cr;
	    for (my $j = 1; $j <= $num_choices; $j++) {
		if ($j == $selected) {
			    print "  <option selected>$j</option>", $cr;
		} else {
			    print "  <option>$j</option>", $cr;
		}
	    }
	    if ($proportional ne 'yes' && $no_opinion eq 'yes') {
		if ($selected eq "No opinion") {
		    print "  <option selected>No opinion</option>";
		} else {
		    print "  <option>No opinion</option>";
		}
	    }
	    print "</select></td>", $cr;
	} else {
	    print '<td><input type="text" name="C'.$k.'"
	    size="3" value="'. $selected. '"></td>';
	}
    }
    print "</tr>", $cr;
}
print '</table></td>', $cr;
if ($js_ui && $voting_enabled) {
    print '<td width="0" valign="top" align="center">
	<input type="button" id="move_top" disabled value="to top"
	onClick="do_move_top()"><br>
	<input type="button" id="move_up" disabled value="move up"
	onClick="do_move_up()"><br>
	<input type="button" id="make_tie" disabled value="make tie"
	onClick="do_make_tie()"><br>
	<input type="button" id="move_down" disabled value="move down"
	onClick="do_move_down()"><br>
	<input type="button" id="move_bottom" disabled value="to bottom"
	onClick="do_move_bottom()">
	<table class="form" width="110"><tr><td>
        <p align="left" style="font-size: 80%" id="jshelp">
	These buttons are deactivated because
	your browser does not support Javascript.</p>
	</td></tr></table>
	</td>', $cr;
}
print '</tr></table>', $cr;


if ($voting_enabled) {
    print p('<input id=vote type="submit" value="Vote!" name="Vote">');
}

print '<p id="sort_button"> Sort the choices by their current rank:
       <input type="submit" value="Sort" name="SortChoices"></p>';

if ($writeins eq 'yes') {
    print '<p>Write in a new choice: <input type="text" size="60" name="writein">';
    print '<input type="submit" value="Add write-in" name="AddWritein"></p>';
}
if ($voting_enabled) {
    print '<p>Read rankings from a saved voting page: ';
    print '<input type="file" id=rankings_file type=file name="rankings_file">';
    print '&nbsp; <input type="submit" id=load_rankings_file value="Load" name="Load">';
}
#print '<br>(To save a voting page, click "Sort" to collect
#    your rankings and then just save this web page in your browser)</p>';
# print p('Reset rankings: <input type="reset" value="Reset" name="Vote">');

print "</form>", $cr;

if ($voting_enabled && $public eq 'yes') {
    print p("If you have already voted, you may see
	<a href=\"http://$thishost$civs_bin_path/results@PERLEXT@?id=$election_id\">
	the results of the poll.</a>");
}

print end_html();

exit 0;

sub ProcessVote {
    my $vote = '';
    $vdata{'last_vote_time'} = $last_vote_time = time();

	# Record the vote (note that vdata is
	# indexed by voter key, preserving anonymity.)
	# print "num_choices = $num_choices", $cr;
    for (my $i = 0; $i < $num_choices; $i++) {
	my $rank = param('C'.$i);
	if ($proportional eq 'yes' && !$use_combined_ratings) {
	    $rank = $num_choices - $rank; # invert
	}
	if ($rank ne 'No opinion' && $rank < 0) { $rank = 0; } # must be proportional
	if ($rank ne 'No opinion' && $rank > 999) { $rank = 999; } # must be proportional
	if ($vote eq '') {
	$vote = $rank;
	} else {
	    $vote = $vote.",".$rank
	}
	$rank[$i] = $rank;
    }
    
    # Record vote, but not voter
    my $voter_ballot_release_key = SecureNonce();
    &GetPrivateHostID;
    my $ballot_key = civs_hash($voter_ballot_release_key,
			       $private_host_id);
    $vdata{$ballot_key} = $vote;
    $vdata{'num_votes'}++;
    $used_voter_keys{civs_hash($voter_key)} = 1;
    &SyncVoterKeys;
    ElectionLog("Election: $title ($election_id) : Recorded vote from voter key $voter_key");
    if ($recorded_voters) {
	$vdata{'recorded_voters'} = $recorded_voters . "\n".  $ballot_key;
    } else {
	$vdata{'recorded_voters'} = $ballot_key;
    }
    if ($reveal_voters eq 'yes') {
	$vdata{"voter key of $ballot_key"} = $voter_key;
    }

	# Now, update matrix.
	# Note: vdata{"2.3"} contains the number of votes where
	# choice 2 beats choice 3 (i.e., has lower
	# numbered rank)
    for (my $j = 0; $j < $num_choices; $j++) {
	for (my $k = 0; $k < $num_choices; $k++) {
	    my $jk = $vdata{"$j.$k"};
	       $jk = 0 if (!defined($jk));
	if ($rank[$j] ne 'No opinion' &&
			$rank[$k] ne 'No opinion' &&
			$rank[$j] < $rank[$k]) 
		{
			$vdata{"$j.$k"} = $jk + 1;
	    }	
	}
    }

    print p("Thank you. Your vote for <strong>$title</strong> has been
	successfully cast. Your voter receipt is ". code($election_id."/".$voter_ballot_release_key).".");
    
    # This is code to be enabled later, when we implement ballot checking.
    #print p("Your password to release your ballot is: " . pre($voter_ballot_release_key));

    PointToResults;
    print end_html();

    exit 0
}

sub CanonicalizeName {
# Strip leading whitespace and
# remove all nonprintable characters
    my $name = $_[0];
    $name =~ s/^(\s)+//;
    $name =~ s/(\s)+$//;
    return $name;
}

sub ProjectName {
# ProjectName(name) is a version of the name that is canonical but
# also has all characters turned to lowercase and no whitespace.
# This is useful for detecting similar names.
    my $name = $_[0];
    $name =~ s/[^\w]//g; # remove all nonalphanumeric characters
    $name =~ s/writein$//;
    $name = lc $name;
    return $name;
}

sub OrderChoices {
	if ($sort_choices || $add_writein) {
		for (my $i = 0; $i < $num_choices; $i++) {
			my $rank = param('C'.$i);
			$iota[$i] = $i;
			$rank[$i] = param('C'.$i);
		}
		if ($proportional ne 'yes') {
			@choice_index = sort { $rank[$a] <=> $rank[$b] } @iota;
		} else {
			@choice_index = sort { $rank[$b] <=> $rank[$a] } @iota;
		}
	} else { # randomize
	    for (my $i = 0; $i < $num_choices; $i++) {
		    $choice_index[$i] = $i;
		    if ($proportional eq 'yes' && $use_combined_ratings) {
			    $rank[$i] = 0;
		    } else {
			    $rank[$i] = $num_choices;
		    }
	    }
	    if (!defined($shuffle) || $shuffle ne 'no') {
		fisher_yates_shuffle(\@choice_index);
	    }
	}
}

sub AddWritein {
	# This function has a race condition.  The effect of two concurrent 
	# writeins is not clear.  Nor is the effect of a concurrent writein
	# and vote, or even request for the candidate list.
    my $writein = CanonicalizeName(param('writein'));
    my $ok = 1;
    if ($writein eq '') {
	print p(b("Name of write-in choice is empty")), $cr;
	$ok = 0;
    }
    $writein .= " (write-in)";
    my $p = ProjectName($writein);
    for (my $i = 0; $ok && $i < $num_choices; $i++) {
	if (ProjectName($choices[$i]) eq $p) {
	    print p(b("Sorry, the name of the write-in is too similar ",
				    "to an existing choice")), $cr;
	    $ok = 0;
	    last;
	}
    }
    if ($ok) {
		$choices = $choices . "\n" . $writein;
		$choice_index[$num_choices] = $num_choices;
		$rank[$num_choices] = $num_choices;
		my $index = $num_choices;
		$choices[$index] = $writein;
		$num_choices++;
		$edata{'choices'} = $choices;

		# Now update the vote matrix so that this write-in is
		# ranked last by every voter so far.
		for (my $j = 0; $j < $num_choices - 1; $j++) {
		    $vdata{"$j.$index"} = $num_votes;
		}
    }
}

sub Load {
	# load rankings from saved file
    my $rankings_file = upload('rankings_file');
	if (!defined($rankings_file)) {
		# should probably print an error: the file failed to upload correctly
		return;
	}
    for (my $i = 0; $i < $num_choices; $i++) { 
		$rank[$i] = $num_choices; 
	}
    while (<$rankings_file>) { 
		last if (m/^<!-- Current rankings/);
	}
    while (<$rankings_file>) {
		last if (m/^-->/);
		my ($index, $name, $rank) = m/([0-9]+) "([^"]*)" ([0-9]+)/;
		$rank = 1 if ($rank < 1);
		$rank = $num_choices if ($rank > $num_choices);
		for (my $i = 0; $i < $num_choices; $i++) {
	    	my $cname = $choices[$i];
		    $cname =~ s/"/ /;
		    if ($cname eq $name) {
				# print "Setting choice $i to rank $rank", $cr;
				$rank[$i] = $rank;
	    	}
		}
    }
    for (my $i = 0; $i < $num_choices; $i++) { 
		$iota[$i] = $i; 
	}
    if ($proportional ne 'yes') {
		@choice_index = sort { $rank[$a] <=> $rank[$b] } @iota;
    } else {
		@choice_index = sort { $rank[$b] <=> $rank[$a] } @iota;
    }
    my $loaded_choices = 'yes';
}


sub IntroduceWriteins {
    print p($description).$cr;
    print p("Voting is not yet permitted in this poll. However,
             you may view the available choices and write in new
	     choices. Use the text field below to write in new choices.");
}

sub IntroduceVoting {
    print p($description).$cr;

    print p("Only the $winners_text will win the poll.<p>
    The poll ends <b>$election_end</b>.
    The poll supervisor is $name (<tt>$email_addr</tt>).
    Contact the poll supervisor if you need help.").$cr;

    if ($proportional ne 'yes' || !$use_combined_ratings) {
	print "<p>Give each of the following choices
	a rank, where a smaller-numbered rank means that you
	prefer that choice more.
	For example, it would make
	sense to give your top choice (or choices) the rank 1.
	You may give choices the same rank if you have no
	preference between them. You do not have to use all the
	possible ranks. All choices are initially given the
	lowest possible rank.", $cr;
	if ($no_opinion eq 'yes') {
	    print '<b>Note:</b> &ldquo;No opinion&rdquo;
		is <i>not</i> the same as the lowest possible rank; it means
		that you choose not to rank this choice with respect to the
		other choices.</p>', $cr;
	}

	if ($proportional eq 'yes') {
	    print '<p>This poll is decided using an experimental
	    Condorcet-based method designed to provide proportional
	    representation.';
	    print ' It is assumed by the voting algorithm that you want
		    the ranking of your most preferred
		    <i>winning</i> choice to be as
		    high as possible, and if two sets of winning choices
		    agree on the choice you prefer most, then you
		    would decide between them using the second most preferred
		    choice, and so on. ';
	    print '</p>';
	}
	print "<a href=\"$civs_home\">(More information on Condorcet methods)</a></p>", $cr, $cr;
    } else {
	print '<p>This poll is decided using an experimental
	Condorcet-based algorithm designed to provide proportional
	representation.';

	print 'Please give each of the following choices a
	<b>weight</b> that expresses how much you want that
	choice to be part of the winning set of choices.';
	print ' It is assumed by the voting algorithm that you want
		the sum of weights of winning choices to be as large
		as possible.';
	print "All choices
	are currently given a weight of zero, meaning that you
	have no interest in seeing them win.
	Weights cannot be negative or larger than 999.
	It doesn't help you to make your weights larger
	than other voters' weights, because your weights are only compared
	against each other.
	<a href=\"$civs_url/proportional.html\">[See more information]</a>.
	</p>";
    }
}

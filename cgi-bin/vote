#!@PERL@ -I@CGIBINDIR@

use CGI qw(:standard);
use Digest::MD5 qw(md5_hex);
use civs_common;
use DB_File;
use mail;

use Socket;
use IO::Handle;

$thisurl = $civs_bin_path."/vote";

# There are four different ways to enter this script.
# 1. As the initial page one uses to cast a vote in a private election
#    (with id, voter, voter_key defined)
# 2. As the initial page one uses to cast a vote in a public election (id
#    defined, no voter/voter_key)
# 3. To actually cast a vote (old process_vote): Vote is defined, as are C1-Cn.
# 4. To reorder the choices from their default order (case 1, case 2 variants
#    where C1-Cn are already defined)

$voter = param('voter'); # nearly obsolete
$old_voter_key = param('voter_key'); # nearly obsolete
$voter_key = param('key');
$old_access_control = ($voter_key eq '');

HTML_Header("CIVS Voting");

if ($num_winners == 1) {
    $winners_text = "(1) favorite choice";
} else {
    $winners_text = "($num_winners) favorite choices";
}

use election;

CIVS_Header("$title");

CheckElectionID;
CheckStarted;
CheckNotStopped;
if ($public ne 'yes') {
    CheckVoterKey;
} else {
    $voter_key = remote_addr(); # XXX should make the voter key the hash and
    $voter = "voter";           # the voter the remote address
}
CheckNotVoted;

if (param('Vote') ne '') {
# process the vote!

    $vote = '';
    $i=0;

# Record the vote (note that vdata is
# indexed by voter key, preserving anonymity.)
# print "num_choices = $num_choices\n";
    for ($i = 0; $i < $num_choices; $i++) {
	$rank = param('C'.$i);
	if ($rank < 0) { $rank = 0; } # must be proportional
	if ($rank > 999) { $rank = 999; } # must be proportional
	if ($vote eq '') {
	    $vote = $rank;
	} else {
	    $vote = $vote.",".$rank
	}
	$rank[$i] = $rank;
    }
    $vdata{$voter_key} = $vote;  # Vote is recorded (but not voter)

    ElectionLog("Election: $title ($election_id) : Recorded vote from voter key $voter_key");

# Now, update matrix.
# Note: vdata{"2.3"} contains the number of votes where
# choice 2 beats choice 3 (i.e., has lower
# numbered rank)
    for ($j = 0; $j < $num_choices; $j++) {
	for ($k = 0; $k < $num_choices; $k++) {
	    $jk = $vdata{"$j.$k"};
	    if ($rank[$j] ne 'No opinion' &&
		$rank[$k] ne 'No opinion' &&
		$rank[$j] < $rank[$k]) {
		$vdata{"$j.$k"} = $jk + 1;
	    }
	}
    }
    $vdata{'num_votes'}++;
    if ($recorded_voters eq '') {
	$vdata{'recorded_voters'} = $voter_key;
    } else {
	$vdata{'recorded_voters'} = $recorded_voters . "\n".  $voter_key;
    }

    untie %edata;
    untie %vdata;
    UnlockElection;

    print p("Thank you. Your vote for <strong>$title</strong> has been successfully cast.\n");

    PointToResults;
    print end_html();

    exit 0;
}

# Not processing a vote. Either this is an initial vote page
# or we've been asked to resort the choices, or a write-in
# has been provided.

$sort_choices = param('SortChoices');
if ($sort_choices ne '' || param('AddWritein') ne '') {
    for ($i = 0; $i < $num_choices; $i++) {
	$rank = param('C'.$i);
	@iota[$i] = $i;
	$rank[$i] = param('C'.$i);
    }
    if ($proportional ne 'yes') {
	@choice_index = sort { $rank[$a] <=> $rank[$b] } @iota;
    } else {
	@choice_index = sort { $rank[$b] <=> $rank[$a] } @iota;
    }
} else { # randomize
    for ($i = 0; $i < $num_choices; $i++) {
	$choice_index[$i] = $i;
	if ($proportional ne 'yes') {
	    $rank[$i] = $num_choices;
	} else {
	    $rank[$i] = 0;
	}
    }
# probably should use fisher_yates_shuffle routine in
# civs_common.
    for ($i = 0; $i < $num_choices - 1; $i++) {
	$j = rand($num_choices - $i - 1) + 1;
	$temp = $choice_index[$i];
	$choice_index[$i] = $choice_index[$j];
	$choice_index[$j] = $temp;
    }
}

sub CanonicalizeName {
# Strip leading whitespace and
# remove all nonprintable characters
    my $name = $_[0];
    $name =~ s/^(\s)+//;
    $name =~ s/(\s)+$//;
    return $name;
}

sub ProjectName {
# ProjectName(name) is a version of the name that is canonical but
# also has all characters turned to lowercase and no whitespace.
# This is useful for detecting similar names.
    my $name = $_[0];
    $name =~ s/[^\w]//g; # remove all nonalphanumeric characters
    $name = lc $name;
    return $name;
}

if (param('AddWritein') ne '' && $writeins eq 'yes') {
    my $writein = param('writein');
    $writein = CanonicalizeName($writein);
    my $p = ProjectName($writein);
    my $ok = 1;
    for (my $i = 0; $i < $num_choices; $i++) {
	if (ProjectName($choices[$i]) eq $p) {
	    print p(b("Sorry, the name of the write-in is too similar to an existing choice\n"));
	    $ok = 0;
	    last;
	}
    }
    if ($ok) {
	$choices = $choices . "\n" . $writein;
	$choice_index[$num_choices] = $num_choices;
	$rank[$num_choices] = $num_choices;
	$choices[$num_choices++] = $writein;
	$edata{'choices'} = $choices;
#   Now update the vote matrix so that this write-in is
#   ranked last by every voter so far.
	for (my $j = 0; $j < $num_choices - 1; $j++) {
	    $vdata{"$j.$index"} += $num_votes;
	}
    }
}

if (param('Load')) {
# load rankings from saved file
    $rankings_file = param('rankings_file');
    for ($i = 0; $i < $num_choices; $i++) { $rank[$i] = $num_choices; }
    while (<$rankings_file>) { if (m/^<!-- Current rankings/) { last; }}
    while (<$rankings_file>) {
	if (m/^-->/) { last; }
	($index, $name, $rank) = m/([0-9]+) "([^"]*)" ([0-9]+)/;
	if ($rank < 1) { $rank = 1; }
	if ($rank > $num_choices) { $rank = $num_choices; }
	for ($i = 0; $i < $num_choices; $i++) {
	    $cname = $choices[$i];
	    $cname =~ s/"/ /;
	    if ($cname eq $name) {
		# print "Setting choice $i to rank $rank\n";
		$rank[$i] = $rank;
	    }
	}
    }
    for ($i = 0; $i < $num_choices; $i++) { @iota[$i] = $i; }
    if ($proportional ne 'yes') {
	@choice_index = sort { $rank[$a] <=> $rank[$b] } @iota;
    } else {
	@choice_index = sort { $rank[$b] <=> $rank[$a] } @iota;
    }
    $loaded_choices = 'yes';
}

print p("Please vote on the election ".b($title).'.').$cr;
print p($description).$cr;

print p("Only the $winners_text will win the election and be selected.<br>
The election ends <b>$election_end</b>.
The election supervisor is $name (<tt>$email_addr</tt>).
Contact the election supervisor if you need help.").$cr;

if ($proportional ne 'yes') {
    print "<p>Please rank the following choices by assigning
    each choice a rank, where a lower rank means that you
    prefer that choice more. For example, it would make
    sense to give your top choice (or choices) the rank 1.
    You may give choices the same rank if you have no
    preference between them. You do not have to use all the
    possible ranks. All choices are currently given the
    lowest possible rank. Note that &ldquo;No opinion&rdquo;
    is not the same as the lowest possible rank; it genuinely
    expresses no opinion.
    </p> <p>For more information on
    how the Condorcet voting system works, <a
    href=$civs_url>click here</a></p>\n\n";
} else {
    print '<p>This election is decided using an experimental
    Condorcet-based algorithm designed to provide proportional
    representation. Please give each of the following choices a
    <b>weight</b> that expresses how much you want the
    choice to be one of the winners.';
    if ($use_combined_weights) {
	print ' It is assumed by the voting algorithm that you want
		the sum of weights of selected choices to be as large
		as possible. ';
    } else {
	print ' It is assumed by the voting algorithm that you want
		the weight of your most preferred selected choice to be as
		large as possible, and if two sets of selected choices
		agree on the selected choice you prefer most, then you
		would decide between them using the second most preferred
		choice, and so on. ';
    }
    print "All choices
    are currently given a weight of zero, meaning that you
    have no interest in seeing them selected. Weights cannot
    be negative or larger than 999.
    It doesn't help you to make your weights larger
    than other voters' weights; your weights are only compared
    against each other.
    <a href=\"$civs_url/proportional.html\">[See more information]</a>.
    </p>";
}

if ($ballot_reporting eq 'yes') {
	print p(b("Ballot reporting is enabled for this election. ")
	        . "Your ballot (the rankings you assign to candidates) "
		. "will be made public when the election is closed. "
	        . "However, your ballot will be anonymized: "
		. "no personally identifying information will appear.");
}

print '<form method="POST"
        action="'.$thisurl.'"
        enctype="multipart/form-data"
        name="CastVote">';

$rating = 'Rank';
if ($proportional eq 'yes') {
    $rating = 'Weight';
}

print '<table border="1" cellpadding="5" cellspacing="0"><tr>
	<td bgcolor="#000080" bordercolor="#000080">
	  <b><font color=white face=sans-serif>Choice</font></b>
	</td>
	<td width="40" bgcolor="#000080" bordercolor="#000080">
	  &nbsp;
	</td>
	<td bgcolor="#000080" bordercolor="#000080">
          <b><font color=white
	  face=sans-serif>'.$rating.'</font></b>
	</td>
       </tr>';

print hidden('voter', $voter); # nearly obsolete
print hidden('voter_key', $old_voter_key); # nearly obsolete
print hidden('key', $key);
print hidden('id', $election_id);

print "\n<!-- Current rankings:\n";
for ($i = 0; $i < $num_choices; $i++) {
    $name = $choices[$i];
    $name =~ s/"/ /;
    $selected = $rank[$i];
    print "$i \"$choices[$i]\" $selected\n";
}
print "-->\n";

for ($i = 0; $i < $num_choices; $i++) {
    $k = $choice_index[$i];
    $selected = $rank[$k];
    $choice = $choices[$k];
    print "<tr><td><b>$choice</b></td><td>&nbsp;</td>\n";
    if ($proportional ne 'yes') {
	print "<td><select size=1 name=\"C$k\">\n";
	for ($j = 1; $j <= $num_choices; $j++) {
	    if ($j == $selected) {
		print "  <option selected>$j</option>\n";
	    } else {
		print "  <option>$j</option>\n";
	    }
	}
	if ($selected eq "No opinion") {
	    print "  <option selected>No opinion</option>";
	} else {
	    print "  <option>No opinion</option>";
	}
	print "</select></td>\n";
    } else {
	print '<td><input type="text" name="C'.$k.'"
	size="3" value="'. $selected. '"></td>';
    }
    print "</tr>\n";
}
print "</table>\n";
print p('<input type="submit" value="Vote!" name="Vote">');

print p('Sort the choices by their current rank:
       <input type="submit" value="Sort" name="SortChoices">');

if ($writeins eq 'yes') {
    print '<p>Write in a new choice: <input type="text" size="60" name="writein">';
    print '<input type="submit" value="Add write-in" name="AddWritein"></p>';
}
print '<p>Read rankings from a saved voting page: ';
print '<input type="file" id=rankings_file type=file name="rankings_file">';
print '&nbsp; <input type="submit" id=load_rankings_file value="Load" name="Load">';
print '<br>(To save a voting page, click "Sort" to collect
    your rankings and then just save this web page in your browser)</p>';
print p('Reset rankings: <input type="reset" value="Reset" name="Vote">');

print "</form>\n";

if ($public eq 'yes') {
    print p("If you have already voted, you may see
	<a href=\"http://$thishost$civs_bin_path/results?id=$election_id\">
	the results of the election.</a>");
}

print end_html();
untie %edata;

exit 0;
